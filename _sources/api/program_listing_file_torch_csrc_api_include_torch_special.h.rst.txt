:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_special.h:

Program Listing for File special.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_special.h>` (``torch/csrc/api/include/torch/special.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <ATen/ATen.h>
   
   namespace torch {
   namespace special {
   
   inline Tensor gammaln(const Tensor& self) {
     return torch::special_gammaln(self);
   }
   
   inline Tensor& gammaln_out(Tensor& result, const Tensor& self) {
     return torch::special_gammaln_out(result, self);
   }
   
   inline Tensor gammainc(const Tensor& self, const Tensor& other) {
     return torch::special_gammainc(self, other);
   }
   
   inline Tensor& gammainc_out(Tensor& result, const Tensor& self, const Tensor& other) {
     return torch::special_gammainc_out(result, self, other);
   }
   
   inline Tensor gammaincc(const Tensor& self, const Tensor& other) {
     return torch::special_gammaincc(self, other);
   }
   
   inline Tensor& gammaincc_out(Tensor& result, const Tensor& self, const Tensor& other) {
     return torch::special_gammaincc_out(result, self, other);
   }
   
   inline Tensor multigammaln(const Tensor& self, int64_t p) {
     return torch::special_multigammaln(self, p);
   }
   
   inline Tensor& multigammaln_out(Tensor& result, const Tensor& self, int64_t p) {
     return torch::special_multigammaln_out(result, self, p);
   }
   
   inline Tensor polygamma(int64_t n, const Tensor& self) {
     return torch::special_polygamma(n, self);
   }
   
   inline Tensor& polygamma_out(Tensor& result, int64_t n, const Tensor& self) {
     return torch::special_polygamma_out(result, n, self);
   }
   
   inline Tensor psi(const Tensor& self) {
     return torch::special_psi(self);
   }
   
   inline Tensor& psi_out(Tensor& result, const Tensor& self) {
     return torch::special_psi_out(result, self);
   }
   
   inline Tensor digamma(const Tensor& self) {
     return torch::special_digamma(self);
   }
   
   inline Tensor& digamma_out(Tensor& result, const Tensor& self) {
     return torch::special_digamma_out(result, self);
   }
   
   inline Tensor entr(const Tensor& self) {
     return torch::special_entr(self);
   }
   
   inline Tensor& entr_out(Tensor& result, const Tensor& self) {
     return torch::special_entr_out(result, self);
   }
   
   inline Tensor erf(const Tensor& self) {
     return torch::special_erf(self);
   }
   
   inline Tensor& erf_out(Tensor& result, const Tensor& self) {
     return torch::special_erf_out(result, self);
   }
   
   inline Tensor erfc(const Tensor& self) {
     return torch::special_erfc(self);
   }
   
   inline Tensor& erfc_out(Tensor& result, const Tensor& self) {
     return torch::special_erfc_out(result, self);
   }
   
   inline Tensor erfcx(const Tensor& self) {
     return torch::special_erfcx(self);
   }
   
   inline Tensor& erfcx_out(Tensor& result, const Tensor& self) {
     return torch::special_erfcx_out(result, self);
   }
   
   inline Tensor erfinv(const Tensor& self) {
     return torch::special_erfinv(self);
   }
   
   inline Tensor& erfinv_out(Tensor& result, const Tensor& self) {
     return torch::special_erfinv_out(result, self);
   }
   
   inline Tensor logsumexp(const Tensor& self, IntArrayRef dims, bool keepdim) {
     return torch::special_logsumexp(self, dims, keepdim);
   }
   
   inline Tensor& logsumexp_out(Tensor& result, const Tensor& self, IntArrayRef dims, bool keepdim) {
     return torch::special_logsumexp_out(result, self, dims, keepdim);
   }
   
   inline Tensor ndtri(const Tensor& self) {
     return torch::special_ndtri(self);
   }
   
   inline Tensor& ndtri_out(Tensor& result, const Tensor& self) {
     return torch::special_ndtri_out(result, self);
   }
   
   inline Tensor log_ndtr(const Tensor& self) {
     return torch::special_log_ndtr(self);
   }
   
   inline Tensor& log_ndtr_out(Tensor& result, const Tensor& self) {
     return torch::special_log_ndtr_out(result, self);
   }
   
   inline Tensor logit(const Tensor& self) {
     return torch::special_logit(self);
   }
   
   inline Tensor& logit_out(Tensor& result, const Tensor& self) {
     return torch::special_logit_out(result, self);
   }
   
   inline Tensor expit(const Tensor& self) {
     return torch::special_expit(self);
   }
   
   inline Tensor& expit_out(Tensor& result, const Tensor& self) {
     return torch::special_expit_out(result, self);
   }
   
   inline Tensor exp2(const Tensor& self) {
     return torch::special_exp2(self);
   }
   
   inline Tensor& exp2_out(Tensor& result, const Tensor& self) {
     return torch::special_exp2_out(result, self);
   }
   
   inline Tensor expm1(const Tensor& self) {
     return torch::special_expm1(self);
   }
   
   inline Tensor& expm1_out(Tensor& result, const Tensor& self) {
     return torch::special_expm1_out(result, self);
   }
   
   inline Tensor xlogy(const Tensor& self, const Tensor& other) {
     return torch::special_xlogy(self, other);
   }
   
   inline Tensor xlogy(const Scalar& self, const Tensor& other) {
     return torch::special_xlogy(self, other);
   }
   
   inline Tensor xlogy(const Tensor& self, const Scalar& other) {
     return torch::special_xlogy(self, other);
   }
   
   inline Tensor& xlogy_out(Tensor& result, const Tensor& self, const Tensor& other) {
     return torch::special_xlogy_out(result, self, other);
   }
   
   inline Tensor& xlogy_out(Tensor& result, const Scalar& self, const Tensor& other) {
     return torch::special_xlogy_out(result, self, other);
   }
   
   inline Tensor& xlogy_out(Tensor& result, const Tensor& self, const Scalar& other) {
     return torch::special_xlogy_out(result, self, other);
   }
   
   inline Tensor xlog1py(const Tensor& self, const Tensor& other) {
     return torch::special_xlog1py(self, other);
   }
   
   inline Tensor xlog1py(const Scalar& self, const Tensor& other) {
     return torch::special_xlog1py(self, other);
   }
   
   inline Tensor xlog1py(const Tensor& self, const Scalar& other) {
     return torch::special_xlog1py(self, other);
   }
   
   inline Tensor& xlog1py_out(Tensor& result, const Tensor& self, const Tensor& other) {
     return torch::special_xlog1py_out(result, self, other);
   }
   
   inline Tensor& xlog1py_out(Tensor& result, const Scalar& self, const Tensor& other) {
     return torch::special_xlog1py_out(result, self, other);
   }
   
   inline Tensor& xlog1py_out(Tensor& result, const Tensor& self, const Scalar& other) {
     return torch::special_xlog1py_out(result, self, other);
   }
   
   inline Tensor zeta(const Tensor& self, const Tensor& other) {
     return torch::special_zeta(self, other);
   }
   
   inline Tensor zeta(const Scalar& self, const Tensor& other) {
     return torch::special_zeta(self, other);
   }
   
   inline Tensor zeta(const Tensor& self, const Scalar& other) {
     return torch::special_zeta(self, other);
   }
   
   inline Tensor& zeta_out(Tensor& result, const Tensor& self, const Tensor& other) {
     return torch::special_zeta_out(result, self, other);
   }
   
   inline Tensor& zeta_out(Tensor& result, const Scalar& self, const Tensor& other) {
     return torch::special_zeta_out(result, self, other);
   }
   
   inline Tensor& zeta_out(Tensor& result, const Tensor& self, const Scalar& other) {
     return torch::special_zeta_out(result, self, other);
   }
   
   inline Tensor i0(const Tensor& self) {
     return torch::special_i0(self);
   }
   
   inline Tensor& i0_out(Tensor& result, const Tensor& self) {
     return torch::special_i0_out(result, self);
   }
   
   inline Tensor ndtr(const Tensor& self) {
     return torch::special_ndtr(self);
   }
   
   inline Tensor& ndtr_out(Tensor& result, const Tensor& self) {
     return torch::special_ndtr_out(result, self);
   }
   
   inline Tensor i0e(const Tensor& self) {
     return torch::special_i0e(self);
   }
   
   inline Tensor& i0e_out(Tensor& result, const Tensor& self) {
     return torch::special_i0e_out(result, self);
   }
   
   inline Tensor i1(const Tensor& self) {
     return torch::special_i1(self);
   }
   
   inline Tensor& i1_out(Tensor& result, const Tensor& self) {
     return torch::special_i1_out(result, self);
   }
   
   inline Tensor i1e(const Tensor& self) {
     return torch::special_i1e(self);
   }
   
   inline Tensor& i1e_out(Tensor& result, const Tensor& self) {
     return torch::special_i1e_out(result, self);
   }
   
   inline Tensor sinc(const Tensor& self) {
     return torch::special_sinc(self);
   }
   
   inline Tensor& sinc_out(Tensor& result, const Tensor& self) {
     return torch::special_sinc_out(result, self);
   }
   
   inline Tensor round(const Tensor& self) {
     return torch::special_round(self);
   }
   
   inline Tensor& round_out(Tensor& result, const Tensor& self) {
     return torch::special_round_out(result, self);
   }
   
   inline Tensor log1p(const Tensor& self) {
     return torch::special_log1p(self);
   }
   
   inline Tensor& log1p_out(Tensor& result, const Tensor& self) {
     return torch::special_log1p_out(result, self);
   }
   
   inline Tensor log_softmax(const Tensor& self, int64_t dim, c10::optional<ScalarType> dtype) {
     return torch::special_log_softmax(self, dim, dtype);
   }
   
   inline Tensor softmax(const Tensor& self, int64_t dim, c10::optional<ScalarType> dtype) {
     return torch::special_softmax(self, dim, dtype);
   }
   
   inline Tensor chebyshev_polynomial_t(const Tensor& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_t(x, n);
   }
   
   inline Tensor chebyshev_polynomial_t(const Scalar& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_t(x, n);
   }
   
   inline Tensor chebyshev_polynomial_t(const Tensor& x, const Scalar& n) {
     return torch::special_chebyshev_polynomial_t(x, n);
   }
   
   inline Tensor& chebyshev_polynomial_t_out(Tensor& output, const Tensor& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_t_out(output, x, n);
   }
   
   inline Tensor& chebyshev_polynomial_t_out(Tensor& output, const Scalar& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_t_out(output, x, n);
   }
   
   inline Tensor& chebyshev_polynomial_t_out(Tensor& output, const Tensor& x, const Scalar& n) {
     return torch::special_chebyshev_polynomial_t_out(output, x, n);
   }
   
   inline Tensor chebyshev_polynomial_u(const Tensor& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_u(x, n);
   }
   
   inline Tensor chebyshev_polynomial_u(const Scalar& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_u(x, n);
   }
   
   inline Tensor chebyshev_polynomial_u(const Tensor& x, const Scalar& n) {
     return torch::special_chebyshev_polynomial_u(x, n);
   }
   
   inline Tensor& chebyshev_polynomial_u_out(Tensor& output, const Tensor& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_u_out(output, x, n);
   }
   
   inline Tensor& chebyshev_polynomial_u_out(Tensor& output, const Scalar& x, const Tensor& n) {
     return torch::special_chebyshev_polynomial_u_out(output, x, n);
   }
   
   inline Tensor& chebyshev_polynomial_u_out(Tensor& output, const Tensor& x, const Scalar& n) {
     return torch::special_chebyshev_polynomial_u_out(output, x, n);
   }
   
   inline Tensor hermite_polynomial_h(const Tensor& x, const Tensor& n) {
     return torch::special_hermite_polynomial_h(x, n);
   }
   
   inline Tensor hermite_polynomial_h(const Scalar& x, const Tensor& n) {
     return torch::special_hermite_polynomial_h(x, n);
   }
   
   inline Tensor hermite_polynomial_h(const Tensor& x, const Scalar& n) {
     return torch::special_hermite_polynomial_h(x, n);
   }
   
   inline Tensor& hermite_polynomial_h_out(Tensor& output, const Tensor& x, const Tensor& n) {
     return torch::special_hermite_polynomial_h_out(output, x, n);
   }
   
   inline Tensor& hermite_polynomial_h_out(Tensor& output, const Scalar& x, const Tensor& n) {
     return torch::special_hermite_polynomial_h_out(output, x, n);
   }
   
   inline Tensor& hermite_polynomial_h_out(Tensor& output, const Tensor& x, const Scalar& n) {
     return torch::special_hermite_polynomial_h_out(output, x, n);
   }
   
   inline Tensor hermite_polynomial_he(const Tensor& x, const Tensor& n) {
     return torch::special_hermite_polynomial_he(x, n);
   }
   
   inline Tensor hermite_polynomial_he(const Scalar& x, const Tensor& n) {
     return torch::special_hermite_polynomial_he(x, n);
   }
   
   inline Tensor hermite_polynomial_he(const Tensor& x, const Scalar& n) {
     return torch::special_hermite_polynomial_he(x, n);
   }
   
   inline Tensor& hermite_polynomial_he_out(Tensor& output, const Tensor& x, const Tensor& n) {
     return torch::special_hermite_polynomial_he_out(output, x, n);
   }
   
   inline Tensor& hermite_polynomial_he_out(Tensor& output, const Scalar& x, const Tensor& n) {
     return torch::special_hermite_polynomial_he_out(output, x, n);
   }
   
   inline Tensor& hermite_polynomial_he_out(Tensor& output, const Tensor& x, const Scalar& n) {
     return torch::special_hermite_polynomial_he_out(output, x, n);
   }
   
   }} // torch::special
